import org.grails.core.artefact.DomainClassArtefactHandler
import org.hibernate.Hibernate

import org.springframework.beans.BeanUtils

import com.k_int.web.toolkit.custprops.CustomProperty
import com.k_int.web.toolkit.custprops.types.CustomPropertyContainer
import groovy.transform.*

import java.time.temporal.Temporal

@Field CustomPropertyContainer customPropertyContainer

// Build up a map for easy sorting.
Map<String, Set<CustomProperty>> propMap = [:]  
for (CustomProperty p : customPropertyContainer.value) {
  final String pName = p.definition.name
  if (!propMap.containsKey(pName)) {
    propMap[pName] = [p] as Set
  } else {
    propMap[pName] << p
  }
}

json {
  propMap.each { final String propName, Set<CustomProperty> props ->
    call propName, props, { CustomProperty p ->
      g.inline( p , [excludes: ['definition', 'parent', 'value'] ]) {

        Class<?> valueClass = Hibernate.getClass(p.value)

        // Temporal is the base interface for many Date/Time types
        if ( Temporal.isAssignableFrom(valueClass) ){
          value "${p.value}" // ToString()

          // If we have any domain class values, render them without owner so we dont get a loop
        } else if (DomainClassArtefactHandler.isDomainClass(Hibernate.getClass(p.value))) {
          value g.render (p.value, [excludes: ['owner'] ])

          // Any non-scalar objects, such as Maps or Collections we render out
        } else if (valueClass && !BeanUtils.isSimpleValueType(valueClass)) {
          value g.render(p.value)

          // Render any scalar values directly
        } else {
          value p.value
        }
        type g.render (p.definition)
      }
    } 
  }
}