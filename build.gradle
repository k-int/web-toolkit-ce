buildscript {
	repositories {
    maven { url "https://maven.k-int.com/content/repositories/public" }
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://repo.grails.org/grails/core" }
		maven { url "https://maven.k-int.com/content/repositories/releases" }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
		classpath "org.grails.plugins:views-gradle:2.3.2"
		
		classpath 'com.k_int.gradle:kint-gradle-plugin:2.2.0'
		// classpath "org.grails.plugins:hibernate5:$gormVersion" // Prev 7.3.1
	}
}

plugins {
	id 'antlr'
}

repositories {
  maven { url "https://maven.k-int.com/content/repositories/public" }
  mavenCentral()
  maven { url "https://repo.grails.org/grails/core/" }
}

//version "0.1"
group 'com.k_int.grails'

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'org.grails.grails-plugin'

apply plugin: 'org.grails.plugins.views-json'
apply plugin: 'com.k_int.gradle.plugin'
apply plugin: 'com.k_int.gradle.conventional-git'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}

	compileOnly {
		extendsFrom developmentOnly
	}

	testImplementation {
		extendsFrom developmentOnly
		extendsFrom implementation
	}
}

bootRun {
	ignoreExitValue true
	jvmArgs(
			'-Dspring.output.ansi.enabled=always',
			'-noverify',
			'-XX:TieredStopAtLevel=1',
			'-Xmx1024m')
	sourceResources sourceSets.main
	String springProfilesActive = 'spring.profiles.active'
	systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

sourceSets {
  main {
    resources {
      srcDir 'src/migrations'
    }
  }
}

dependencies {
  developmentOnly "org.grails:grails-core"
  developmentOnly "org.grails:grails-logging"
  developmentOnly "org.grails:grails-plugin-databinding"
  developmentOnly "org.grails:grails-plugin-i18n"
  developmentOnly "org.grails:grails-plugin-interceptors"
  developmentOnly "org.grails:grails-plugin-rest"
  developmentOnly "org.grails:grails-plugin-services"
  developmentOnly "org.grails:grails-plugin-url-mappings"
  developmentOnly "org.grails:grails-web-boot"
  developmentOnly "org.grails.plugins:async"
  developmentOnly "org.grails.plugins:hibernate5"
  // Do we need this?
  //implementation("org.hibernate:hibernate-core:5.6.15.Final")

  developmentOnly "org.springframework.boot:spring-boot-starter-undertow"

  developmentOnly "org.springframework.boot:spring-boot-autoconfigure"
  developmentOnly "org.springframework.boot:spring-boot-starter-logging"
  developmentOnly "org.springframework.boot:spring-boot-starter-validation"

  developmentOnly "io.micronaut:micronaut-inject-groovy"

  console("org.grails:grails-console")
  runtimeOnly("com.h2database:h2")
  
  testImplementation("io.micronaut:micronaut-inject-groovy")

  // For some reason testImplementation for these two fails on gradlew check
	compileOnly("org.grails:grails-gorm-testing-support")
	testImplementation "org.grails:grails-web-testing-support"

	compileOnly("org.spockframework:spock-core")

  testImplementation("org.grails:grails-gorm-testing-support")
  testImplementation("org.spockframework:spock-core")

  testImplementation("io.micronaut:micronaut-http-client")

  profile "org.grails.profiles:rest-api-plugin"

  // --------------------------------- Custom Deps Below -----------------------------------//
	developmentOnly "org.grails.plugins:views-json"
	developmentOnly "org.postgresql:postgresql:42.7.4"
	developmentOnly 'org.codehaus.janino:janino:3.1.9' // Needed for conditional logging


	developmentOnly "org.springframework.security:spring-security-core:6.1.9", { // Prev 5.8.1
		[
			'spring-aop',
			'spring-beans',
			'spring-context',
			'spring-core',
			'spring-expression'
		].each {
			exclude module: it
		}
	}
	developmentOnly "org.springframework.security:spring-security-web:5.8.14", {
		exclude module: 'spring-web'
	}

	developmentOnly 'com.ibm.icu:icu4j:62.1'

	// Minio for file storage to S3
	developmentOnly "io.minio:minio:8.5.12"
	developmentOnly 'com.squareup.okhttp3:okhttp:4.8.1'
	developmentOnly 'org.jetbrains.kotlin:kotlin-stdlib:1.3.70'
	developmentOnly 'com.amazonaws:aws-java-sdk-s3:1.12.770'

	// SHould be replaced and rewritten out of this module.
	developmentOnly 'io.github.http-builder-ng:http-builder-ng-core:1.0.4'

	antlr "org.antlr:antlr4:4.10" // use ANTLR version 4

	testImplementation 'com.h2database:h2:2.1.212'
}

/* application {
  mainClass.set("web.toolkit.ce.Application")
} */

/* 
java {
  sourceCompatibility = JavaVersion.toVersion("11")
} */

tasks.withType(Javadoc) {
	// Suppress "no comment" warnings on JAVA code (currently generated
	options.addStringOption('Xdoclint:none', '-quiet')
}


tasks.withType(GroovyCompile) {
	configure(groovyOptions) {
		forkOptions.jvmArgs = ['-Xmx1024m']
	}
}

tasks.withType(Test) {
  useJUnitPlatform()
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false


eclipse {
	autoBuildTasks ([
		':processResources',
		':generateGrammarSource'
	])
	synchronizationTasks ([
		':processResources',
		':generateGrammarSource'
	])

	classpath {
		defaultOutputDir = new File(project.buildDir.canonicalPath, 'main')
		file {

			whenMerged { classpath ->

				Set<String> resources = sourceSets.main?.resources?.srcDirs?.collect { it.canonicalPath }

				entries.collect().each {

					if (it.path =='grails-app/conf' && it.output?.toLowerCase().endsWith('test')) {
						classpath.entries.remove( it )
						println "Removed ${it}"
						return
					}

					if (it.hasProperty('output') && it.output.startsWith('bin/')) {
						it.output = 'build/' + it.output.substring(4)
					}

					// Eclude the output of the resources added to the source sets for grails.
					// Instead we add the results of the 'processResources' tasks to the classpath later.
					if (it.hasProperty('dir') && resources.find { res -> it.dir?.canonicalPath?.startsWith(res) } ) {
						it.exported = false
						it.excludes << '**/*'
					}
				}
				def lib = new org.gradle.plugins.ide.eclipse.model.Library(fileReference(file("${tasks.processResources.destinationDir}")))
				println "Adding: ${lib}"
				entries << lib
			}
		}
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = project.group
			artifactId = project.name
			version = project.version

			from components.java
			artifact sourcesJar
			artifact javadocJar

			pom {
				name = 'Web Toolkit'
				description = 'Provides general tooling for web application frontend development'
				developers {
					developer {
						name = 'Steve Osguthorpe'
						email = 'steve.osguthorpe@k-int.com'
					}
				}
			}
		}
	}
}

compileGsonViews {
	packageName = "web-toolkit"
}

// Writes plugin data
/*
tasks.register("extendedConfigScript") { Task me ->

	// Find the correct file.
	Task configTask = project.tasks.getByName('configScript')
	File configFile = configTask.outputs.files.files.find { it.name == 'config.groovy' }
	if(!configFile) {
		return  // No need to continue if the file is not there
	}

	me.inputs.property('version', project.version)
	me.outputs.file(configFile)
	project.tasks.getByName('compileGroovy').dependsOn( me )
	me.dependsOn( configTask )

	doLast {
		configFile.append("""
    /***** Extention ***** /
withConfig(configuration) {
  inline(phase: 'CONVERSION') { source, context, classNode ->
    classNode.putNodeMetaData('projectVersion', '$project.version')
  }
}""")
	}
}
*/
